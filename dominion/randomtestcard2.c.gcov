        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:** Program: HW 4 - Random Test: Smithy
        -:    3:** Author: Rozalija Zibrat
        -:    4:** Date: 14 November 2018
        -:    5:** Description: Random tester for the card Smithy.
        -:    6:*******************************************************************************/
        -:    7:
        -:    8:#include <string.h>
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "Smithy"
        -:   18:
        2:   19:int main() {
        -:   20:
        2:   21:	int runThisManyTimes = 500;
        -:   22:
        -:   23:	int k;
     1002:   24:	for (k = 0; k <runThisManyTimes; k++)
        -:   25:	{
     1000:   26:		printf("\n\n\nTEST # %d\n", k);
        -:   27:
        -:   28:		struct gameState state;
     1000:   29:		int numPlayers = 2;
     1000:   30:		int kingdomCards[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   31:			sea_hag, tribute, smithy, council_room };
     1000:   32:		int randomSeed = 1000;
        -:   33:
        -:   34:		//Initialize a test game.  Players are given 7 copper cards and 3 estates.
        -:   35:		// Players do not draw 5 cards at start however. Code is commented out.
     1000:   36:		initializeGame(numPlayers, kingdomCards, randomSeed, &state);
        -:   37:
     1000:   38:		int currentPlayer = 1;
     1000:   39:		state.whoseTurn = currentPlayer;
        -:   40:
        -:   41:		// Add between 0 and 20 new cards to the player's deck.
     1000:   42:		int numNewCards = rand() % 21;
     1000:   43:		int deckIndex = 10;
        -:   44:
    10838:   45:		for (int i = 0; i < numNewCards; i++)
        -:   46:		{
        -:   47:			// adding random card - 10 allowed cards + plus 3 treasure
     9838:   48:			int randomCard = rand() % 13;
        -:   49:
     9838:   50:			if (randomCard == 10)
        -:   51:			{
      760:   52:				state.deck[currentPlayer][deckIndex] = copper;
        -:   53:			}
     9078:   54:			else if (randomCard == 11)
        -:   55:			{
      702:   56:				state.deck[currentPlayer][deckIndex] = silver;
        -:   57:			}
     8376:   58:			else if (randomCard == 12)
        -:   59:			{
      746:   60:				state.deck[currentPlayer][deckIndex] = gold;
        -:   61:			}
        -:   62:			else
        -:   63:			{
     7630:   64:				state.deck[currentPlayer][deckIndex] = kingdomCards[randomCard];
        -:   65:			}
        -:   66:
     9838:   67:			state.deckCount[currentPlayer]++;
        -:   68:		}
        -:   69:
        -:   70:		// Shuffle the cards before drawing.
     1000:   71:		shuffle(currentPlayer, &state);
        -:   72:
     1000:   73:		state.handCount[currentPlayer] = 0;
        -:   74:
        -:   75:		// Give player between 1 and 5 cards.  (The Smithy could be the first or last card played)
     1000:   76:		int randomHandCount = rand() % 5 + 1;
        -:   77:		// Draw cards.
     3966:   78:		for (int i = 0; i < randomHandCount; i++)
        -:   79:		{
     2966:   80:			drawCard(currentPlayer, &state);
        -:   81:		}
        -:   82:
        -:   83:		// Force player to have at least one Smithy.
     1000:   84:		state.hand[currentPlayer][0] = smithy;
        -:   85:
     1000:   86:		int handBefore = state.handCount[currentPlayer];
        -:   87:
        -:   88:		// Run function.
     1000:   89:		int returnValue = cardEffect(smithy, 0, 0, 0, &state, 0, 0);
        -:   90:		/*******************************************************************************
        -:   91:		* TEST 1 - Check that 3 new cards were drawn into hand (smithy discarded).
        -:   92:		*******************************************************************************/
        -:   93:		// Check that hand count is now 3. (3 drawn and smithy removed.)
     1000:   94:		assert(state.handCount[currentPlayer] == handBefore + 3);
     1000:   95:		printf("3 (bug) cards drawn. \n");
        -:   96:
        -:   97:		/*******************************************************************************
        -:   98:		* TEST 2 - Check that smithy was discarded
        -:   99:		*******************************************************************************/ 
     1000:  100:		assert(state.playedCardCount == 1  && state.playedCards[0] == smithy);
     1000:  101:		printf("Smithy was played (will be discarded). \n");
        -:  102:
        -:  103:		/*******************************************************************************
        -:  104:		* TEST 3 - Check return value.
        -:  105:		*******************************************************************************/
        -:  106:		// The value should be 0.  
     1000:  107:		assert(returnValue == 0);
     1000:  108:		printf("Return value is 0 (supposed to be 0). \n");
        -:  109:	}
        -:  110:
        2:  111:	printf("\n **All tests passed for the %s card.** \n\n", TESTCARD);
        -:  112:
        -:  113:
        2:  114:	return 0;
        -:  115:}
