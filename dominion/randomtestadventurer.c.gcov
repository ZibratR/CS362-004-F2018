        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:** Program: HW 4 - Random Test: Adventurer
        -:    3:** Author: Rozalija Zibrat
        -:    4:** Date: 14 November 2018
        -:    5:** Description: Random tester for the card Adventurer.
        -:    6:*******************************************************************************/
        -:    7:
        -:    8:#include <string.h>
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "Adventurer"
        -:   18:
        2:   19:int main() {
        -:   20:
        2:   21:	int runThisManyTimes = 500;
        -:   22:	
        -:   23:	int k;
     1002:   24:	for (k = 0; k <runThisManyTimes; k++)
        -:   25:	{
     1000:   26:		printf("\n\n\nTEST # %d\n", k);
        -:   27:
        -:   28:		struct gameState state;
     1000:   29:		int numPlayers = 2;
     1000:   30:		int kingdomCards[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   31:			sea_hag, tribute, smithy, council_room };
     1000:   32:		int randomSeed = 1000;
        -:   33:
        -:   34:		//Initialize a test game.  Players are given 7 copper cards and 3 estates.
        -:   35:		// Players do not draw 5 cards at start however. Code is commented out.
     1000:   36:		initializeGame(numPlayers, kingdomCards, randomSeed, &state);
        -:   37:
     1000:   38:		int treasureBefore = 0,
     1000:   39:			treasureAfter = 0;
        -:   40:	
     1000:   41:		int currentPlayer = 1;
     1000:   42:		state.whoseTurn = currentPlayer;
        -:   43:
     1000:   44:		state.handCount[currentPlayer] = 0;
        -:   45:
        -:   46:		// I considered removing the player's inital cards and giving them an entirely random deck, 
        -:   47:		// however each player WILL be given an initial deck during setup.
        -:   48:
        -:   49:		// Add between 0 and 20 new cards to the player's deck.
     1000:   50:		int numNewCards = rand() % 21;
     1000:   51:		int deckIndex = 10;
        -:   52:
    10838:   53:		for (int i = 0; i < numNewCards; i++)
        -:   54:		{
        -:   55:			// adding random card - 10 allowed cards + plus 3 treasure
     9838:   56:			int randomCard = rand() % 13;
        -:   57:
     9838:   58:			if (randomCard == 10)
        -:   59:			{
      760:   60:				state.deck[currentPlayer][deckIndex] = copper;
        -:   61:			}
     9078:   62:			else if (randomCard == 11)
        -:   63:			{
      702:   64:				state.deck[currentPlayer][deckIndex] = silver;
        -:   65:			}
     8376:   66:			else if (randomCard == 12)
        -:   67:			{
      746:   68:				state.deck[currentPlayer][deckIndex] = gold;
        -:   69:			}
        -:   70:			else
        -:   71:			{
     7630:   72:				state.deck[currentPlayer][deckIndex] = kingdomCards[randomCard];
        -:   73:			}
        -:   74:
     9838:   75:			state.deckCount[currentPlayer]++;
        -:   76:		}
        -:   77:
        -:   78:		// Shuffle the cards before drawing.
     1000:   79:		shuffle(currentPlayer, &state);
        -:   80:
        -:   81:		// Give player between 1 and 5 cards.  (The adventurer could be the first or last card played)
     1000:   82:		int randomHandCount = rand() % 5 + 1;
        -:   83:		// Draw cards.
     3966:   84:		for (int i = 0; i < randomHandCount; i++)
        -:   85:		{
     2966:   86:			drawCard(currentPlayer, &state);
        -:   87:		}
        -:   88:
        -:   89:		// Force player to have at least one adventurer.
     1000:   90:		state.hand[currentPlayer][0] = adventurer;
        -:   91:
        -:   92:		// Count treasure before playing adventurer.
     3966:   93:		for (int i = 0; i < randomHandCount; i++)
        -:   94:		{
     4278:   95:			if (state.hand[currentPlayer][i] == copper ||
     2624:   96:				state.hand[currentPlayer][i] == silver ||
     1312:   97:				state.hand[currentPlayer][i] == gold)
        -:   98:			{
     1654:   99:				treasureBefore++;
        -:  100:			}
        -:  101:		}
        -:  102:
        -:  103:
        -:  104:
     1000:  105:		int deckBefore = state.deckCount[currentPlayer];
     1000:  106:		int handBefore = state.handCount[currentPlayer];
        -:  107:
        -:  108:		// Run function.
     1000:  109:		int returnValue = cardEffect(adventurer, 0, 0, 0, &state, 0, 0);
        -:  110:		/*******************************************************************************
        -:  111:		* TEST 1 - Shuffle the deck.
        -:  112:		*******************************************************************************/
        -:  113:
        -:  114:		// Check that deck is shuffled if deck count is 0.
     1000:  115:		if (deckBefore <= 1)
    #####:  116:		assert(state.deckCount[currentPlayer] > 1);
     1000:  117:		printf("Deck was shuffled. \n");
        -:  118:
        -:  119:		/*******************************************************************************
        -:  120:		* TEST 2 - Get two cards.
        -:  121:		*******************************************************************************/
        -:  122:		//Check that the current players hand now has two (should be treasure) cards.  
     1000:  123:		assert(state.handCount[currentPlayer] == handBefore + 3);
     1000:  124:		printf("3 cards added to hand. (This is a bug introduced in assignment 1. Should be 2 cards) \n");
        -:  125:
        -:  126:		/*******************************************************************************
        -:  127:		* TEST 3 - Make sure those cards are treasure.
        -:  128:		*******************************************************************************/
     6966:  129:		for (int i = 0; i < (randomHandCount + 3); i++)
        -:  130:		{
     7278:  131:			if (state.hand[currentPlayer][i] == copper ||
     2624:  132:				state.hand[currentPlayer][i] == silver ||
     1312:  133:				state.hand[currentPlayer][i] == gold)
        -:  134:			{
     4654:  135:				treasureAfter++;
        -:  136:			}
        -:  137:		}
        -:  138:	
     1000:  139:		printf("\nTreasure BEFORE %d\n", treasureBefore);
     1000:  140:		printf("\nTreasure AFTER %d\n", treasureAfter);
        -:  141:
        -:  142:
     1000:  143:		assert(treasureAfter == treasureBefore + 3);
     1000:  144:		printf("3 treasures added to hand. (This is a bug introduced in assignment 1. Should be 2) \n");
        -:  145:		/*******************************************************************************
        -:  146:		* TEST 4 - Check return value.
        -:  147:		*******************************************************************************/
        -:  148:		// The value should be 0.  
     1000:  149:		assert(returnValue == 0);
     1000:  150:		printf("Return value is 0 (supposed to be 0). \n");
        -:  151:	}
        -:  152:
        2:  153:	printf("\n **All tests passed for the %s card.** \n\n", TESTCARD);
        -:  154:
        -:  155:
        2:  156:	return 0;
        -:  157:}
