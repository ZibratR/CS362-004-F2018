        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:** Program: HW 4 - Random Test: Adventurer
        -:    3:** Author: Rozalija Zibrat
        -:    4:** Date: 14 November 2018
        -:    5:** Description: Random tester for the card Adventurer.
        -:    6:*******************************************************************************/
        -:    7:
        -:    8:#include <string.h>
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define TESTCARD "Adventurer"
        -:   18:
        2:   19:int main() {
        -:   20:
        2:   21:	int runThisManyTimes = 500;
        -:   22:
        -:   23:	int k;
     1002:   24:	for (k = 0; k <runThisManyTimes; k++)
        -:   25:	{
     1000:   26:		printf("\n\n\nTEST # %d \n", k);
        -:   27:
        -:   28:		struct gameState state;
     1000:   29:		int numPlayers = 2;
     1000:   30:		int kingdomCards[10] = { adventurer, gardens, village, minion, mine, cutpurse,
        -:   31:			sea_hag, tribute, smithy, council_room };
     1000:   32:		int randomSeed = 1000;
        -:   33:
        -:   34:		//Initialize a test game.  Players are given 7 copper cards and 3 estates.
        -:   35:		// Players do not draw 5 cards at start however. Code is commented out.
     1000:   36:		initializeGame(numPlayers, kingdomCards, randomSeed, &state);
        -:   37:
     1000:   38:		int currentPlayer = 0;
        -:   39:		// Force player to have at least one gardens.
     1000:   40:		state.hand[currentPlayer][0] = gardens;
        -:   41:
        -:   42:		// Run function.
     1000:   43:		int returnValue = cardEffect(gardens, 0, 0, 0, &state, 0, 0);
        -:   44:		/*******************************************************************************
        -:   45:		* TEST 1 - Check return value.
        -:   46:		*******************************************************************************/
        -:   47:		// The value should be -1.  
     1000:   48:		assert(returnValue == -1);
     1000:   49:		printf("Return value is -1 (supposed to be -1). \n");
        -:   50:	}
        -:   51:
        2:   52:	printf("\n **All tests passed for the %s card.** \n\n", TESTCARD);
        -:   53:
        -:   54:
        2:   55:	return 0;
        -:   56:}
